// Generated by BUCKLESCRIPT VERSION 5.0.0, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Caml_int32 = require("bs-platform/lib/js/caml_int32.js");

function plus1(x) {
  return x + 1 | 0;
}

console.log(8);

var listPlus1 = List.map((function (x) {
        return x + 1 | 0;
      }), /* :: */[
      12,
      /* :: */[
        5,
        /* :: */[
          8,
          /* :: */[
            4,
            /* [] */0
          ]
        ]
      ]
    ]);

console.log(listPlus1);

var arrayPlus1 = $$Array.map((function (x) {
        return x + 1 | 0;
      }), /* array */[
      10,
      7,
      3,
      20
    ]);

console.log(arrayPlus1);

function even(x) {
  if (x <= 0) {
    return true;
  } else {
    return odd(x - 1 | 0);
  }
}

function odd(x) {
  if (x <= 0) {
    return false;
  } else {
    return even(x - 1 | 0);
  }
}

console.log(even(400));

function factorial(x) {
  if (x <= 2) {
    return x;
  } else {
    return Caml_int32.imul(x, factorial(x - 1 | 0));
  }
}

console.log(factorial(9));

function foo(param) {
  var iteration = /* record */[/* contents */0];
  return (function (param) {
      iteration[0] = iteration[0] + 1 | 0;
      return iteration[0];
    });
}

var bar = foo(/* () */0);

console.log(bar(/* () */0));

console.log(bar(/* () */0));

console.log(bar(/* () */0));

console.log(bar(/* () */0));

function add4(param) {
  return 4 + param | 0;
}

console.log(add4(5));

function addComponents(param) {
  return param[0] + param[1] | 0;
}

var tuple = /* tuple */[
  3,
  4
];

console.log(addComponents(tuple));

console.log(16);

function add(x, y, param) {
  if (x !== undefined) {
    var x$prime = x;
    if (y !== undefined) {
      return x$prime + y | 0;
    } else {
      return x$prime;
    }
  } else if (y !== undefined) {
    return y;
  } else {
    return 0;
  }
}

console.log(add(undefined, 1, /* () */0));

function add$1($staropt$star, $staropt$star$1, param) {
  var x = $staropt$star !== undefined ? $staropt$star : 0;
  var y = $staropt$star$1 !== undefined ? $staropt$star$1 : 0;
  return x + y | 0;
}

console.log(add$1(undefined, 5, /* () */0));

function multiply($staropt$star, $staropt$star$1, param) {
  var x = $staropt$star !== undefined ? $staropt$star : 1;
  var y = $staropt$star$1 !== undefined ? $staropt$star$1 : 1;
  return Caml_int32.imul(x, y);
}

console.log(multiply(14, undefined, /* () */0));

function square(x, param) {
  return multiply(x, x, /* () */0);
}

console.log(multiply(5, 5, /* () */0));

function plus5(param) {
  return 5 + param | 0;
}

console.log(plus5(4));

var numbers = /* :: */[
  11,
  /* :: */[
    2,
    /* :: */[
      8,
      /* [] */0
    ]
  ]
];

function plus2(x) {
  return 2 + x | 0;
}

console.log(List.map(plus2, numbers));

console.log(List.map((function (param) {
            return 2 + param | 0;
          }), numbers));

function curry2(f, x, y) {
  return Curry._1(f, /* tuple */[
              x,
              y
            ]);
}

function add$2(param) {
  return param[0] + param[1] | 0;
}

console.log(add$2(/* tuple */[
          2,
          4
        ]));

function times2(x) {
  return (x << 1);
}

function twice(s) {
  return s + s;
}

var s = String(8);

console.log(s + s);

console.log(List.sort(Caml_obj.caml_compare, List.filter((function (x) {
                  return x < 5;
                }))(List.map((function (x) {
                    return x + 1 | 0;
                  }), /* :: */[
                  4,
                  /* :: */[
                    2,
                    /* :: */[
                      1,
                      /* :: */[
                        3,
                        /* :: */[
                          5,
                          /* [] */0
                        ]
                      ]
                    ]
                  ]
                ]))));

function divTuple(param) {
  var y = param[1];
  if (y !== 0) {
    return Caml_int32.div(param[0], y);
  } else {
    return -1;
  }
}

console.log(divTuple(/* tuple */[
          4,
          3
        ]));

console.log(divTuple(/* tuple */[
          1,
          0
        ]));

console.log(24);

function $plus$plus$plus(s, t) {
  return s + (" " + t);
}

console.log("Hello World");

function add$3(x, y) {
  return x + y | 0;
}

console.log(/* () */0);

function first(param) {
  return param[0];
}

console.log(4);

exports.plus1 = plus1;
exports.listPlus1 = listPlus1;
exports.arrayPlus1 = arrayPlus1;
exports.even = even;
exports.odd = odd;
exports.factorial = factorial;
exports.foo = foo;
exports.bar = bar;
exports.add4 = add4;
exports.addComponents = addComponents;
exports.tuple = tuple;
exports.multiply = multiply;
exports.square = square;
exports.plus5 = plus5;
exports.numbers = numbers;
exports.plus2 = plus2;
exports.curry2 = curry2;
exports.times2 = times2;
exports.twice = twice;
exports.divTuple = divTuple;
exports.$plus$plus$plus = $plus$plus$plus;
exports.add = add$3;
exports.first = first;
/*  Not a pure module */
